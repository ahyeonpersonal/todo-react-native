#18. Adding ToDo list : 
App.js #151

Usaully we mapping each of todo list from ToDos.
for example)
{toDo.map(todo => <Todo />)}
because it was an array

But
since we save toDo as an object, we need to take each value from toDo value first, and mapping it
for example)
{Object.values(toDos)} => Array

#19. PropTypes
ToDo.js #3

#19-1 
ToDo.js #15~

#19-2 set isCompleted:false
Todo.js #44

#20. Refactoring start : instead of copying props into the state, create constructor

#20-1.Delete ToDovalue :text
ToDo.js #76~

#20-2. Create Constructor
ToDo.js #8~

#20-3. Move state to constructor
ToDo.js #43 && ToDo.js #10

#21-1. Create _deleteToDo
App.js #90. To delete information, it's easy to use Array's of id array

#21-2. Pass this._DeleteToDo to <toDo />
App.js #150

#21-3. deleteToDo PropTypes ToDo.js #20
#21-6. id PropTypes ToDo.js #22

#21-4. Passing delete function do <TouchableOpacity /> 
ToDo.js #172

#21-5. const {deleteToDo, id}  : getting id, delete by props
ToDo.js #91
