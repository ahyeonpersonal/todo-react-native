#17-1. State loadedToDos
App.js #15

#17-2. Mention loadedToDos
Mention loadedToDos
App.js #96

#17-3. Import AppLoading
App.js #5

#17-4. Currently since loadedToDos are not ready yet, blank screen
App.js #99~

#17-5. Create ComponentDidMount
App.js #19 ~

#17-6. Create _LloadToDos()
: when after 'componentDidMount' change loadedToDos state as 'true'
App.js #24

#17-7. When onSubmitEditing is done, _addtTDo()
App.js #126

#17-8. Create _addToDo()
App.js #31 ~ 

#17-9 : This is how the newtodo should be look like...

since we keep updating {text} and editing {text} it's better to save as an object

example) if data is saved as an object, when I delete one of to do, i can dele like 'toDos [id][1]' something like this.
Then whole data in id=1, is deleted

const toDos = {
1 : {
  id:1,
  text : "studying React",
  isCompleted : false,
  date:20181130
  },
2 : {
  id:2,
  text : "studying PHP, SQL",
  isCompleted : false,
  date:20181201  
  }
}

But if the data is saved as Array, it's hard to delete every single data

#17-9-1.
toDos should be like.... previous toDo state + newToDo
App.js #37~

#17-9-2. import uuidv1
App.js #6

#17-9-3. Structure newToDoObject = {}
App.js #60~


